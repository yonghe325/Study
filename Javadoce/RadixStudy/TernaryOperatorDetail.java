/*
二进制中的原码,反码,补码
正数的原码,反码,补码都相同(三码合一)
当看计算机运行结果的时候,要看原码

  原码为原本的数,未经计算机运算,已定义的数
		最高位为符号位,0代表正数,1代表负数,java中所有的数都是有符号的
  负数的反码为该负数原码取反得到的数,符号位不变,
		10010 ==取反==> 11101
		1101010110 ==取反==> 1010101001
  补码,计算机在运算的时候,都是以补码的方式来运算
		补码可以将正数和负数统一
  		负数的补码 为 该负数的反码+1
  		负数的反码 为 该负数的补码-1
*/

public class TernaryOperatorDetail{
	public static void main(String[] args) {
/*
位操作
位移符号
	& 按位与
		两位全为1,结果为一,否则为0
	| 按位或
		两位有一个为1,结果为一,否则为0
	^ 按位异或
		两位一个为1,一个为0,结果为1,否则为0
	~ 按位取反
		1变0,0变1
	<<,>>算数位移
		算数右移>>,低位溢出,符号位不变,并用符号位补溢出的高位
		算数左移<<,符号位不变,低位补0
	>>>,无符号位移,逻辑右移(只有向右)
		逻辑右移>>>,低位溢出,高位补0,符号位变化
*/
///////////////////////////////////////////////////////////////		
		System.out.println("2&3=");
		System.out.println(2&3);// 2&3?,2按位与3
			//先得到2的补码  
		      	//2的原码,补码 ==> 00000000 00000000 00000000 00000010
			//再得到3的补码
		      	//3的原码,补码 ==> 00000000 00000000 00000000 00000011
			//按位与&比较
				//00000000 00000000 00000000 00000010
				//00000000 00000000 00000000 00000011
				//00000000 00000000 00000000 00000010 
		        	//运算后的补码
				//符号位为0,结果的原码与运算后的补码相同
			//结果就是00000000 00000000 00000000 00000010 
		    // = 2 
///////////////////////////////////////////////////////////////		
		System.out.println("~-2=" + ~-2);// ~2=?,按位取反
			//-2的原码 
				//10000000 00000000 00000000 00000010
			//-2的反码
				//11111111 11111111 11111111 11111101
			//-2的补码:-2的反码+1
				//11111111 11111111 11111111 11111110
			//对-2按位取反
				//00000000 00000000 00000000 00000001
					//运算后的补码
		    //运算后的补码符号位为0,是正数
					//所以结果原码为	
			//所以结果原码为00000000 00000000 00000000 00000001	
			// =1
///////////////////////////////////////////////////////////////				
		System.out.println("~2=" + ~2);
			//2的原码/补码 
				//00000000 00000000 00000000 00000010
			//对2按位取反
				//11111111 11111111 11111111 11111101
					//运算后的补码
		    //运算后的补码符号位为1,是负数
					//所以结果反码为 补码-1	
			//所以结果反码为11111111 11111111 11111111 11111100
			//原码为	10000000 00000000 00000000 00000011
			// =3
		System.out.println("-3^3=");		
		System.out.println(-3^3);//-3^3=?,按位异或
		System.out.println("~-5=" + ~-5);// ~-5=?,按位取反 
	
		System.out.println("==========="); 
	
		int a1 = 1>>2;//向右位移2
		//1 ==> 00000001 == 向右位移2 ==> 00000000 = 0
		//本质为1/2/2 = 0(int类型)
		int b1 = -1>>2;//向右位移2
		//-1 ==> 10000000 0000000 0000000 00000001 = 向右位移2 ==> 10000000 0000000 0000000 00000000 = -1
		int c1 = 1<<2;				
		//1 ==> 00000001 == 向左位移2 ==> 00000100 = 4
		//本质为1*2*2 = 4
		int d1 = -1<<2;
		//-1 ==> 10000000 0000000 0000000 00000001 = 向左位移2 ==> 10000000 0000000 0000000 00000100 = -3
		int e = 3>>>2;//算术右移两位
		//3 ==> 00000000 0000000 0000000 00000011 = 向右位移2 ==> 00000000 0000000 0000000 00000000 = 0
		int f = -3>>>2;//算术右移两位
		//-3原码= 10000000 0000000 0000000 00000011
		//-3反码= 01111111 1111111 1111111 11111100
		//-3补码= 01111111 1111111 1111111 11111101
	    //-3右移= 00011111 1111111 1111111 11111111
		System.out.println("a1=" + a1);
		System.out.println("b1=" + b1);
		System.out.println("c1=" + c1);
		System.out.println("d1=" + d1);
		System.out.println("e=" + e);
		System.out.println("f=" + f);
	
	}
}